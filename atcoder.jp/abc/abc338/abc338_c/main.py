#!/usr/bin/env python3
# from typing import *


# def solve(N: int, Q: List[int], A: List[int], B: List[int]) -> int:
def solve(N, Q: list[int], A: list[int], B: list[int]):
    """
    1. 全探索
        Aがとりうる値、Bがとりうる値を全部確認する。Q_N < 10^6なので、10^12回のループになる。
    2. Aだけ固定して考える
        Aをx個作るとすると、必要な材料iはA_i * x個必要。残った材料はQ_i - (A_i * x)グラムある。
        料理を作るためには材料が1グラムは必要なので、探索範囲はrange(1, max(Q) + 1)になる
        Q_iに注目すると、{Q_i - (A_i * x)}//B_iがQ_iに関する最大値で、実際に作れる数はmin({Q_i - (A_i * x)}//B_i)。
    """
    ans = 0
    for x in range(0, max(Q) + 1):  # Aをx個作る
        B_num = 10**10
        for i in range(N):
            # Aをx個作ることでQ_iが負になるとbreak
            left = Q[i] - (A[i] * x)
            if left < 0:
                B_num = -(10**10)
                break
            if B[i] > 0:
                B_num = min(B_num, (Q[i] - (A[i] * x)) // B[i])
        ans = max(ans, x + B_num)
    return ans


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N = int(input())
    Q = list(map(int, input().split()))
    A = list(map(int, input().split()))
    B = list(map(int, input().split()))

    a = solve(N, Q, A, B)
    print(a)


if __name__ == "__main__":
    main()

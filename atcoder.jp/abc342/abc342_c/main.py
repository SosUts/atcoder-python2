#!/usr/bin/env python3
# from typing import *
import string
from collections import OrderedDict, defaultdict
from pprint import pprint


# def solve(N: int, S: str, Q: int, c: List[str], d: List[str]) -> str:
def solve(N, S: str, Q, c, d):
    for i in range(Q):
        S = S.replace(c[i], d[i])
    return S


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N = int(input())
    S = input()
    Q = int(input())
    replace_dict = dict(zip(string.ascii_lowercase, string.ascii_lowercase))
    mapping_from = string.ascii_lowercase
    mapping_to = string.ascii_lowercase
    for _ in range(Q):
        c, d = input().split()
        #
        replace_dict[c] = d
        mapping_to = mapping_to.replace(c, d)
    print(S.translate(str.maketrans(mapping_from, mapping_to)))
    # pprint(replace_dict)
    # ans = []
    # for s in S:
    #     for i, j in replace_dict.items():
    #         if i == s:
    #             ans.append(j)
    # print(*ans, sep="")
    # eがlになってほしいのにmになってた

    # 方針2
    # if c not in ls:
    #     continue
    # str_dict[c] = d
    # ls.remove(c)
    # ls.add(d)

    # 方針1
    # 置換前の文字cがなかったときはなにもしなくていい
    # 置換前の文字cがあったときは、cのインデックスを作るまたは元のインデックスに加える

    # str_dict: OrderedDict[str, str] = OrderedDict()
    # if c in str_dict:
    #     indices = [i for i, x in enumerate(S) if x == c]
    #     if d in str_dict:
    #         str_dict[d] += indices
    #     else:
    #         str_dict[d] = indices
    # for c, d in str_dict.items():
    #     S = S.replace(c, d)
    # pprint(str_dict)
    # print(S)


if __name__ == "__main__":
    main()
